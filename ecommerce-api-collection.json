{
  "info": {
    "name": "Ecommerce API Collection",
    "description": "Postman kolekce pro testování e-commerce API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "GET All Products",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/products",
          "host": ["{{base_url}}"],
          "path": ["products"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
                "pm.test('Status code je 200, 403 nebo 404', function () {",
                "    pm.expect([200,403,404]).to.include(pm.response.code);",
                "});",
                "pm.test('Response time < 2000ms', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});",
    {
      "name": "GET Product Categories",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/products/categories",
          "host": ["{{base_url}}"],
          "path": ["products", "categories"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code je 200, 403 nebo 404', function () {",
              "    pm.expect([200,403,404]).to.include(pm.response.code);",
              "});",
              "pm.test('Response time < 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "if(pm.response.code === 200) {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.test('Categories array exists', function () {",
              "            pm.expect(jsonData).to.be.an('array');",
              "        });",
              "    } catch(e) {",
              "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "            pm.expect(pm.response.text()).to.be.a('string');",
              "        });",
              "    }",
              "} else {",
              "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "        pm.expect(pm.response.text()).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET Products By Category",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/products/category/electronics",
          "host": ["{{base_url}}"],
          "path": ["products", "category", "electronics"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code je 200, 403 nebo 404', function () {",
              "    pm.expect([200,403,404]).to.include(pm.response.code);",
              "});",
              "pm.test('Response time < 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "if(pm.response.code === 200) {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.test('Products array exists', function () {",
              "            pm.expect(jsonData).to.be.an('array');",
              "        });",
              "    } catch(e) {",
              "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "            pm.expect(pm.response.text()).to.be.a('string');",
              "        });",
              "    }",
              "} else {",
              "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "        pm.expect(pm.response.text()).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GET Carts",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/carts",
          "host": ["{{base_url}}"],
          "path": ["carts"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code je 200, 403 nebo 404', function () {",
              "    pm.expect([200,403,404]).to.include(pm.response.code);",
              "});",
              "pm.test('Response time < 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "if(pm.response.code === 200) {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.test('Carts array exists', function () {",
              "            pm.expect(jsonData).to.be.an('array');",
              "        });",
              "    } catch(e) {",
              "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "            pm.expect(pm.response.text()).to.be.a('string');",
              "        });",
              "    }",
              "} else {",
              "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "        pm.expect(pm.response.text()).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST Create Cart",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set('user_id', 1);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code je 200, 201, 403 nebo 404', function () {",
              "    pm.expect([200,201,403,404]).to.include(pm.response.code);",
              "});",
              "pm.test('Response time < 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "if(pm.response.code === 200 || pm.response.code === 201) {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.test('Cart has userId', function () {",
              "            pm.expect(jsonData.userId).to.eql(pm.variables.get('user_id'));",
              "        });",
              "    } catch(e) {",
              "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "            pm.expect(pm.response.text()).to.be.a('string');",
              "        });",
              "    }",
              "} else {",
              "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "        pm.expect(pm.response.text()).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": {{user_id}},\n  \"date\": \"2025-09-02\",\n  \"products\": [{\n    \"productId\": 1,\n    \"quantity\": 1\n  }]\n}"
        },
        "url": {
          "raw": "{{base_url}}/carts",
          "host": ["{{base_url}}"],
          "path": ["carts"]
        }
      }
    },
    {
      "name": "GET Users",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/users",
          "host": ["{{base_url}}"],
          "path": ["users"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code je 200, 403 nebo 404', function () {",
              "    pm.expect([200,403,404]).to.include(pm.response.code);",
              "});",
              "pm.test('Response time < 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "if(pm.response.code === 200) {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.test('Users array exists', function () {",
              "            pm.expect(jsonData).to.be.an('array');",
              "        });",
              "    } catch(e) {",
              "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "            pm.expect(pm.response.text()).to.be.a('string');",
              "        });",
              "    }",
              "} else {",
              "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "        pm.expect(pm.response.text()).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST Create User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set('user_email', 'test' + Math.floor(Math.random()*10000) + '@mail.com');"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code je 200, 201, 403 nebo 404', function () {",
              "    pm.expect([200,201,403,404]).to.include(pm.response.code);",
              "});",
              "pm.test('Response time < 2000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});",
              "if(pm.response.code === 200 || pm.response.code === 201) {",
              "    try {",
              "        var jsonData = pm.response.json();",
              "        pm.test('User email matches', function () {",
              "            pm.expect(jsonData.email).to.eql(pm.variables.get('user_email'));",
              "        });",
              "    } catch(e) {",
              "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "            pm.expect(pm.response.text()).to.be.a('string');",
              "        });",
              "    }",
              "} else {",
              "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
              "        pm.expect(pm.response.text()).to.be.a('string');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"username\": \"testuser\",\n  \"password\": \"testpass\",\n  \"name\": {\n    \"firstname\": \"Test\",\n    \"lastname\": \"User\"\n  },\n  \"address\": {\n    \"city\": \"Prague\",\n    \"street\": \"Test Street\",\n    \"number\": 1,\n    \"zipcode\": \"12345\",\n    \"geolocation\": {\n      \"lat\": \"50.0755\",\n      \"long\": \"14.4378\"\n    }\n  },\n  \"phone\": \"123456789\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/users",
          "host": ["{{base_url}}"],
          "path": ["users"]
        }
      }
    }
                "if(pm.response.code === 200) {",
                "    try {",
                "        pm.test('Response is JSON', function () {",
                "            pm.response.to.be.withBody;",
                "            pm.response.to.be.json;",
                "        });",
                "        var jsonData = pm.response.json();",
                "        pm.test('Products array exists', function () {",
                "            pm.expect(jsonData).to.be.an('array');",
                "        });",
                "    } catch(e) {",
                "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "            pm.expect(pm.response.text()).to.be.a('string');",
                "        });",
                "    }",
                "} else {",
                "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "        pm.expect(pm.response.text()).to.be.a('string');",
                "    });",
                "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "POST Create Product",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set('product_title', 'Test Product ' + Math.floor(Math.random()*10000));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
                "pm.test('Status code je 200, 201, 403 nebo 404', function () {",
                "    pm.expect([200,201,403,404]).to.include(pm.response.code);",
                "});",
                "pm.test('Response time < 2000ms', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});",
                "if(pm.response.code === 200 || pm.response.code === 201) {",
                "    try {",
                "        var jsonData = pm.response.json();",
                "        pm.test('Product title matches', function () {",
                "            pm.expect(jsonData.title).to.eql(pm.variables.get('product_title'));",
                "        });",
                "        pm.test('Price > 0', function () {",
                "            pm.expect(jsonData.price).to.be.above(0);",
                "        });",
                "    } catch(e) {",
                "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "            pm.expect(pm.response.text()).to.be.a('string');",
                "        });",
                "    }",
                "} else {",
                "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "        pm.expect(pm.response.text()).to.be.a('string');",
                "    });",
                "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"{{product_title}}\",\n  \"price\": 99.99,\n  \"description\": \"Test description\",\n  \"image\": \"https://i.pravatar.cc\",\n  \"category\": \"electronics\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/products",
          "host": ["{{base_url}}"],
          "path": ["products"]
        }
      }
    },
    {
      "name": "GET Product By ID",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/products/1",
          "host": ["{{base_url}}"],
          "path": ["products", "1"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
                "pm.test('Status code je 200, 403 nebo 404', function () {",
                "    pm.expect([200,403,404]).to.include(pm.response.code);",
                "});",
                "pm.test('Response time < 2000ms', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});",
                "if(pm.response.code === 200) {",
                "    try {",
                "        var jsonData = pm.response.json();",
                "        pm.test('Product has id', function () {",
                "            pm.expect(jsonData.id).to.eql(1);",
                "        });",
                "    } catch(e) {",
                "        pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "            pm.expect(pm.response.text()).to.be.a('string');",
                "        });",
                "    }",
                "} else {",
                "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "        pm.expect(pm.response.text()).to.be.a('string');",
                "    });",
                "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "PUT Update Product",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.variables.set('update_title', 'Updated Product ' + Math.floor(Math.random()*10000));"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
                "pm.test('Status code is 200, 403 nebo 404', function () {",
                "    pm.expect([200,403,404]).to.include(pm.response.code);",
                "});",
                "pm.test('Response time < 2000ms', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});",
                "if(pm.response.code === 200) {",
                "    pm.test('Updated title matches', function () {",
                "        var jsonData = pm.response.json();",
                "        pm.expect(jsonData.title).to.eql(pm.variables.get('update_title'));",
                "    });",
                "} else {",
                "    pm.test('Odpověď není JSON kvůli omezení API', function () {",
                "        pm.expect(pm.response.text()).to.be.a('string');",
                "    });",
                "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"{{update_title}}\",\n  \"price\": 199.99,\n  \"description\": \"Updated description\",\n  \"image\": \"https://i.pravatar.cc\",\n  \"category\": \"electronics\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/products/1",
          "host": ["{{base_url}}"],
          "path": ["products", "1"]
        }
      }
    },
    {
      "name": "DELETE Product",
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{base_url}}/products/1",
          "host": ["{{base_url}}"],
          "path": ["products", "1"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
                "pm.test('Status code je 200, 403 nebo 404', function () {",
                "    pm.expect([200,403,404]).to.include(pm.response.code);",
                "});",
                "pm.test('Response time < 2000ms', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
